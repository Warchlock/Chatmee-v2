{"version":3,"sources":["components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MyMessage","message","attachments","length","src","file","alt","className","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","trim","sendMessage","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","display","files","bind","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","Modal","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","LoginForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20e2906f.chunk.js","sourcesContent":["const MyMessage = ({ message }) => {\n  // checking type of message\n  if (message.attachments && message.attachments.length > 0) {\n    return (\n      // if image:\n      <img\n        src={message.attachments[0].file}\n        alt=\"message-attachment\"\n        className=\"message-image\"\n        style={{ float: 'right' }}\n      />\n    );\n  }\n\n  return (\n    //  if not simply render text\n    <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\n      {message.text}\n    </div>\n  );\n};\n\nexport default MyMessage;\n","const TheirMessage = ({ lastMessage, message }) => {\n  // checking if it the first message\n  const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\n\n  return (\n    <div className=\"message-row\">\n      {isFirstMessageByUser && (\n        <div\n        // if it the first message create a div with user image as background\n          className=\"message-avatar\"\n          style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\n        />\n      )}\n      {/* checking type of message */}\n      {message.attachments && message.attachments.length > 0\n        ? (\n          // if image return image\n          <img\n            src={message.attachments[0].file}\n            alt=\"message-attachment\"\n            className=\"message-image\"\n            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n          />\n        )\n        : (\n          // if not a image render text\n          <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\n            {message.text}\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default TheirMessage;\n","import { useState } from 'react';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\nimport { sendMessage, isTyping } from 'react-chat-engine';\n\nconst MessageForm = (props) => {\n  // initial value of the message (empty string)\n  const [value, setValue] = useState('');\n  const { chatId, creds } = props;\n\n  const handleChange = (event) => {\n    // value of the input\n    setValue(event.target.value);\n    // rendering 3 dots when typing message\n    isTyping(props, chatId);\n  };\n\n  const handleSubmit = (event) => {\n    // making sure that there is not browser refresh\n    event.preventDefault();\n\n    const text = value.trim();\n\n    // if message is not empty send the message\n    if (text.length > 0) {\n      sendMessage(creds, chatId, { text });\n    }\n    // after sending the message reset the value back to the empty string\n    setValue('');\n  };\n\n  const handleUpload = (event) => {\n    // handling uploading of an image, text stays empty\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\n  };\n\n  return (\n    // form for message\n    <form className=\"message-form\" onSubmit={handleSubmit}>\n      <input\n        className=\"message-input\"\n        placeholder=\"Send a message...\"\n        value={value}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n      {/* upload icon for uploading a image */}\n      <label htmlFor=\"upload-button\">\n        <span className=\"image-button\">\n          <PictureOutlined className=\"picture-icon\" />\n        </span>\n      </label>\n      {/* uplading the image */}\n      <input\n        type=\"file\"\n        multiple={false}\n        id=\"upload-button\"\n        style={{ display: 'none' }}\n        onChange={handleUpload.bind(this)}\n      />\n      <button type=\"submit\" className=\"send-button\">\n        <SendOutlined className=\"send-icon\" />\n      </button>\n    </form>\n  );\n};\n\nexport default MessageForm;\n","import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\n\nconst ChatFeed = (props) => {\n  // deconstructing Props\n  const { chats, activeChat, userName, messages } = props;\n  // finding chats\n  const chat = chats && chats[activeChat];\n  // checking if mesages were read\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n  // component to generate masseges\n  const renderMessages = () => {\n    // fetching messeges ID\n    const keys = Object.keys(messages);\n    // rendering messages\n    return keys.map((key, index) => {\n      const message = messages[key];\n      // checking for last massage\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      // checking if message is user message\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          {/* dynamic div for message */}\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n  // checking for active chat\n  if (!chat) return <div />;\n  // structure of chatfeed\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {/* subtitle of chat */}\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n\n","import { useState } from 'react';\nimport axios from 'axios';\n\nconst projectID = 'dd81a35c-ea4e-43a7-bf29-b86eef2a7e9e';\n\nconst Modal = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    // preventing refresh\n    e.preventDefault();\n\n    const authObject = { 'Project-ID': projectID, 'User-Name': username, 'User-Secret': password };\n    //  username | password => chatRmgine -> give messages\n    // if that works => log in\n    // if not slam error\n    try {\n      // sending request to api\n      await axios.get('https://api.chatengine.io/chats', { headers: authObject });\n\n      localStorage.setItem('username', username);\n      localStorage.setItem('password', password);\n\n      window.location.reload();\n      setError('');\n    } catch (err) {\n      setError('Incorrect credentials.');\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n        <h1 className=\"title\">Chatmee</h1>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\n          <div align=\"center\">\n            <button type=\"submit\" className=\"button\">\n              <span>Start chatting</span>\n            </button>\n          </div>\n        </form>\n        <h1>{error}</h1>\n      </div>\n    </div>\n\n  );\n};\n\nexport default Modal;\n","import { ChatEngine } from 'react-chat-engine';\n\nimport ChatFeed from './components/ChatFeed';\nimport LoginForm from './components/LoginForm';\nimport './App.css';\n\nconst projectID = 'dd81a35c-ea4e-43a7-bf29-b86eef2a7e9e';\n\nconst App = () => {\n  if (!localStorage.getItem('username')) return <LoginForm />;\n\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID={projectID}\n      userName={localStorage.getItem('username')}\n      userSecret={localStorage.getItem('password')}\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}